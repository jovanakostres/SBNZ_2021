package com.preporukaOK.rules.rulesGornjiDeoPersonalizovano

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import com.ftn.PreporukaOdevneKombinacije.model.*;
import com.ftn.PreporukaOdevneKombinacije.model.drlModel.*;
import com.ftn.PreporukaOdevneKombinacije.model.enums.*;
import com.ftn.PreporukaOdevneKombinacije.dto.*;
import org.kie.api.runtime.rule.Match

import accumulate com.ftn.PreporukaOdevneKombinacije.droolsFunction.SumPerClothingItem sumPerItem;

global Map<DressCode, Integer> hashMapColor

declare TipTelaIzabran
	tipTela: TipTela
end

declare PodtipOdeceIzabran
	podTip: OdecaPodTip
end

declare TipOdeceIzabran
	tip: GornjiDeoEnum
end

declare MaterijalIzabran
	materijal: Materijal
end

declare BojaIzabran
    boja: Boja
end

declare Marker
    uniqueIdentifier : String
end


rule "A1 - Tip tela - trougao"
    salience 500
    when
        $user : User(kukovi >= ramena + 5/100 * kukovi);
    then
    	insert(new TipTelaIzabran(TipTela.TROUGAO));
        System.out.println("Tip tela - trougao");
end

rule "A2 - Tip tela - pravougaonik"
    salience 500
    when
        $user : User( ramena <= 25/100 * ramena + struk, ramena <= 5/100 * ramena + kukovi);
        not (TipTelaIzabran())
    then
    	insert(new TipTelaIzabran(TipTela.PRAVOUGAONIK));
        System.out.println("Tip tela - pravougaonik");
end

rule "A3 - Tip tela - obrnuti trougao"
    salience 500
    when
        $user : User( ramena >= kukovi + 5/100 * ramena);
        not (TipTelaIzabran())
    then
    	insert(new TipTelaIzabran(TipTela.OB_TROUGAO));
        System.out.println("Tip tela - pravougaonik");
end

rule "A4 - Tip tela - pescani sat"
     salience 500
     when
         $user : User( ramena > 25/100 * ramena + struk, ramena  <= 5/100 * ramena + kukovi);
         not (TipTelaIzabran())
     then
     	insert(new TipTelaIzabran(TipTela.PES_SAT));
         System.out.println("Tip tela - pescani sat");
 end

rule "A5 - Tip tela - krug"
     salience 490
     when
         not(TipTelaIzabran())
     then
     	insert(new TipTelaIzabran(TipTela.KRUG));
         System.out.println("Tip tela - krug");
end

rule "B1 - Biranje podtipa odece - siroka"
    salience 450
    no-loop
    when
        $tipTela : TipTelaIzabran(tipTela == TipTela.TROUGAO);
        List( size > 0 ) from collect(GornjiDeo( odecaPodTip == OdecaPodTip.SIROKA  ))
    then
    	insert(new PodtipOdeceIzabran(OdecaPodTip.SIROKA));
        System.out.println("B1");
end

rule "B2 - Biranje podtipa odece - uska"
    salience 440
    no-loop
    when
        not(PodtipOdeceIzabran())
    then
    	insert(new PodtipOdeceIzabran(OdecaPodTip.USKA));
                System.out.println("B2");
end

rule "B - Dodavanje bodova za podtip odece"
    salience 430
    no-loop
    when
        PodtipOdeceIzabran($podtip : podTip);
        $gornjiDeo : GornjiDeo( odecaPodTip == $podtip);
        $list: List( size > 0 ) from collect(GornjiDeo( odecaPodTip == $podtip ))
    then
    	insert(new KoeficijentPreporuke(10 + 5 / $list.size(), $gornjiDeo));
        System.out.println("B id odece : " + $gornjiDeo.getId() + "  broj bodova : " + (10 + 5 / $list.size()));
end

rule "C1 - 1 - Biranje tipa odece prema i materijala prema temperaturi > 25"
    salience 400
    no-loop
    when
        $unos : UnosDTO(temperatura > 25);
    then
    	insert(new TipOdeceIzabran(GornjiDeoEnum.MAJICA_KRATKI));
    	insert(new TipOdeceIzabran(GornjiDeoEnum.MAJICA_BRETELE));
    	insert(new TipOdeceIzabran(GornjiDeoEnum.BLUZA));
    	insert(new TipOdeceIzabran(GornjiDeoEnum.KOSULJA));
    	insert(new TipOdeceIzabran(GornjiDeoEnum.MAJICA_KRATKI));
        insert(new TipOdeceIzabran(GornjiDeoEnum.MAJICA_BRETELE));
        insert(new TipOdeceIzabran(GornjiDeoEnum.BLUZA));
        insert(new TipOdeceIzabran(GornjiDeoEnum.KOSULJA));
    	insert(new MaterijalIzabran(Materijal.PAMUK));
    	insert(new MaterijalIzabran(Materijal.LAN));
    	insert(new MaterijalIzabran(Materijal.CIPKA));
        insert(new MaterijalIzabran(Materijal.POLIESTER));
        insert(new MaterijalIzabran(Materijal.SVILA));
        System.out.println("C1 - 1");
end

rule "C1 - 2 - Biranje tipa odece i materijala prema temperaturi izmedju 10 i 20"
    salience 400
    no-loop
    when
        $unos : UnosDTO(temperatura <= 25, temperatura > 10);
    then
    	insert(new TipOdeceIzabran(GornjiDeoEnum.KOSULJA));
    	insert(new TipOdeceIzabran(GornjiDeoEnum.MAJICA_DUGI));
    	insert(new TipOdeceIzabran(GornjiDeoEnum.TUNIKA));
        insert(new TipOdeceIzabran(GornjiDeoEnum.KOSULJA));
        insert(new TipOdeceIzabran(GornjiDeoEnum.MAJICA_DUGI));
        insert(new TipOdeceIzabran(GornjiDeoEnum.TUNIKA));
    	insert(new MaterijalIzabran(Materijal.PAMUK));
        insert(new MaterijalIzabran(Materijal.POLIESTER));
        insert(new MaterijalIzabran(Materijal.SOMOT));
        insert(new MaterijalIzabran(Materijal.TEKSAS));
        insert(new MaterijalIzabran(Materijal.PLIS));
        System.out.println("C1 - 2");
end

rule "C1 - 3 - Biranje tipa odece i materijala prema temperaturi < 10"
    salience 400
    no-loop
    when
        $unos : UnosDTO(temperatura <= 10);
    then
    	insert(new TipOdeceIzabran(GornjiDeoEnum.DUKS));
    	insert(new TipOdeceIzabran(GornjiDeoEnum.DZEMPER));
    	insert(new TipOdeceIzabran(GornjiDeoEnum.KOSULJA));
    	insert(new TipOdeceIzabran(GornjiDeoEnum.DUKS));
        insert(new TipOdeceIzabran(GornjiDeoEnum.DZEMPER));
        insert(new TipOdeceIzabran(GornjiDeoEnum.KOSULJA));
    	insert(new MaterijalIzabran(Materijal.PAMUK));
        insert(new MaterijalIzabran(Materijal.POLIESTER));
        insert(new MaterijalIzabran(Materijal.SOMOT));
        insert(new MaterijalIzabran(Materijal.TEKSAS));
        insert(new MaterijalIzabran(Materijal.PLIS));
        insert(new MaterijalIzabran(Materijal.KRZNO));
        insert(new MaterijalIzabran(Materijal.VUNA));
        System.out.println("C1 - 3");
end

rule "C2 - 1 - Biranje tipa odece i materijala prema dresscodu - lezeran"
    salience 400
    no-loop
    when
        $unos : UnosDTO(dressCode == DressCode.LEZERAN);
    then
    	insert(new TipOdeceIzabran(GornjiDeoEnum.MAJICA_KRATKI));
    	insert(new TipOdeceIzabran(GornjiDeoEnum.MAJICA_BRETELE));
    	insert(new TipOdeceIzabran(GornjiDeoEnum.BLUZA));
    	insert(new TipOdeceIzabran(GornjiDeoEnum.TUNIKA));
    	insert(new TipOdeceIzabran(GornjiDeoEnum.DUKS));
    	insert(new TipOdeceIzabran(GornjiDeoEnum.DZEMPER));
    	insert(new MaterijalIzabran(Materijal.PAMUK));
    	insert(new MaterijalIzabran(Materijal.LAN));
        insert(new MaterijalIzabran(Materijal.POLIESTER));
        insert(new MaterijalIzabran(Materijal.SOMOT));
        insert(new MaterijalIzabran(Materijal.TEKSAS));
        insert(new MaterijalIzabran(Materijal.PLIS));
        insert(new MaterijalIzabran(Materijal.VUNA));
        System.out.println("C2 - 1");
end

rule "C2 - 2 - Biranje tipa odece i materijala prema dresscodu - sportski"
    salience 400
    no-loop
    when
        $unos : UnosDTO(dressCode == DressCode.SPORTSKI);
    then
    	insert(new TipOdeceIzabran(GornjiDeoEnum.MAJICA_KRATKI));
    	insert(new TipOdeceIzabran(GornjiDeoEnum.MAJICA_BRETELE));
    	insert(new TipOdeceIzabran(GornjiDeoEnum.MAJICA_DUGI));
    	insert(new TipOdeceIzabran(GornjiDeoEnum.DUKS));
    	insert(new MaterijalIzabran(Materijal.PAMUK));
        insert(new MaterijalIzabran(Materijal.POLIESTER));
        System.out.println("C2 - 1");
end

rule "C2 - 3 - Biranje tipa odece i materijala prema dresscodu - formalan"
    salience 400
    no-loop
    when
        $unos : UnosDTO(dressCode == DressCode.FORMALAN);
    then
    	insert(new TipOdeceIzabran(GornjiDeoEnum.MAJICA_KRATKI));
    	insert(new TipOdeceIzabran(GornjiDeoEnum.KOSULJA));
    	insert(new TipOdeceIzabran(GornjiDeoEnum.MAJICA_DUGI));
    	insert(new TipOdeceIzabran(GornjiDeoEnum.BLUZA));
        insert(new TipOdeceIzabran(GornjiDeoEnum.KOSULJA));
        insert(new TipOdeceIzabran(GornjiDeoEnum.MAJICA_DUGI));
        insert(new TipOdeceIzabran(GornjiDeoEnum.BLUZA));
        insert(new MaterijalIzabran(Materijal.SOMOT));
        insert(new MaterijalIzabran(Materijal.PAMUK));
        insert(new MaterijalIzabran(Materijal.VUNA));
        insert(new MaterijalIzabran(Materijal.SVILA));
        insert(new MaterijalIzabran(Materijal.KOZA));
        insert(new MaterijalIzabran(Materijal.CIPKA));
        System.out.println("C2 - 3");
end

rule "C2 - 4 - Biranje tipa odece i materijala prema dresscodu - izlazak"
    salience 400
    no-loop
    when
        $unos : UnosDTO(dressCode == DressCode.IZLAZAK);
    then
    	insert(new TipOdeceIzabran(GornjiDeoEnum.MAJICA_BRETELE));
    	insert(new TipOdeceIzabran(GornjiDeoEnum.BLUZA));
    	insert(new TipOdeceIzabran(GornjiDeoEnum.TUNIKA));
    	insert(new MaterijalIzabran(Materijal.PAMUK));
        insert(new MaterijalIzabran(Materijal.POLIESTER));
        insert(new MaterijalIzabran(Materijal.SOMOT));
        insert(new MaterijalIzabran(Materijal.SVILA));
        insert(new MaterijalIzabran(Materijal.KOZA));
        insert(new MaterijalIzabran(Materijal.CIPKA));
        System.out.println("C2 - 1");
end

rule "C2 - 5 - Biranje tipa odece i materijala prema dresscodu - blacktie"
    salience 400
    no-loop
    when
        $unos : UnosDTO(dressCode == DressCode.BLACKTIE);
    then
    	insert(new TipOdeceIzabran(GornjiDeoEnum.KOSULJA));
    	insert(new TipOdeceIzabran(GornjiDeoEnum.BLUZA));
    	insert(new TipOdeceIzabran(GornjiDeoEnum.KOSULJA));
        insert(new TipOdeceIzabran(GornjiDeoEnum.BLUZA));
        insert(new TipOdeceIzabran(GornjiDeoEnum.KOSULJA));
        insert(new TipOdeceIzabran(GornjiDeoEnum.BLUZA));
    	insert(new MaterijalIzabran(Materijal.PAMUK));
        insert(new MaterijalIzabran(Materijal.POLIESTER));
        insert(new MaterijalIzabran(Materijal.SVILA));
        System.out.println("C2 - 3");
end

rule "C - Dodavanje bodova za tip odece"
    salience 380
    no-loop
    when
        $gornjiDeo : GornjiDeo();
        $brojponavljanja : Long( this > 0) from accumulate(
                        	TipOdeceIzabran( tip == $gornjiDeo.getOdecaTip()),
                        	count(1)
                        );
    then
    	insert(new KoeficijentPreporuke(20 + 5 * $brojponavljanja, $gornjiDeo));
        System.out.println("C , id odece : " + $gornjiDeo.getId()  + "  broj bodova : " + (20 + 5 * $brojponavljanja));
end


rule "D1 - 1 - Biranje materijala prema tipu odece - majica kratkih i dugih rukava, majica bretele"
    salience 350
    no-loop
    when
        $setOfTip: Set() from accumulate (
           TipOdeceIzabran( $tip : tip);
           collectSet( $tip )
         )
        GornjiDeoEnum( $nm : name, name == "MAJICA_KRATKI" || name == "MAJICA_DUGI" || name == "MAJICA_BRETELE") from $setOfTip;
        $list: List( size > 0 ) from collect(GornjiDeo( odecaTip.toString() == $nm ))
    then
    	insert(new MaterijalIzabran(Materijal.PAMUK));
        insert(new MaterijalIzabran(Materijal.POLIESTER));
        insert(new MaterijalIzabran(Materijal.LAN));
        insert(new MaterijalIzabran(Materijal.SVILA));
        insert(new MaterijalIzabran(Materijal.CIPKA));
        insert(new MaterijalIzabran(Materijal.PLIS));
        System.out.println("D1 - 1" + "  " + $nm);
end

rule "D1 - 2 - Biranje materijala prema tipu odece - kosulja, bluza, tunika"
    salience 350
    no-loop
    when
        $setOfTip: Set() from accumulate (
                   TipOdeceIzabran( $tip : tip);
                   collectSet( $tip )
                 )
        GornjiDeoEnum( $nm : name, name == "KOSULJA" || name == "BLUZA" || name == "TUNIKA") from $setOfTip;
        $list: List( size > 0 ) from collect(GornjiDeo( odecaTip.toString() == $nm ))
    then
    	insert(new MaterijalIzabran(Materijal.PAMUK));
        insert(new MaterijalIzabran(Materijal.POLIESTER));
        insert(new MaterijalIzabran(Materijal.LAN));
        insert(new MaterijalIzabran(Materijal.SVILA));
        System.out.println("D1 - 2" + "  " + $nm);
end

rule "D1 - 3 - Biranje materijala prema tipu odece - dzemper, duks"
    salience 350
    no-loop
    when
        $setOfTip: Set() from accumulate (
                   TipOdeceIzabran( $tip : tip);
                   collectSet( $tip )
                 )
        GornjiDeoEnum( $nm : name, name == "DZEMPER" || name == "DUKS") from $setOfTip;
        $list: List( size > 0 ) from collect(GornjiDeo( odecaTip.toString() == $nm ))
    then
    	insert(new MaterijalIzabran(Materijal.PAMUK));
        insert(new MaterijalIzabran(Materijal.VUNA));
        insert(new MaterijalIzabran(Materijal.POLIESTER));
        insert(new MaterijalIzabran(Materijal.PLIS));
        System.out.println("D1 - 3" + "  " + $nm);
end

rule "D - Dodavanje bodova za materijal"
    salience 340
    no-loop
    when
        $gornjiDeo : GornjiDeo();
        $brojponavljanja : Long( this > 0) from accumulate(
                           MaterijalIzabran( materijal == $gornjiDeo.getMaterijal()),
                           count(1)
        );
    then
    	insert(new KoeficijentPreporuke(20 + 2 * $brojponavljanja, $gornjiDeo));
        System.out.println("D , id odece : " + $gornjiDeo.getId() + "  broj bodova : " + (20 + 2 * $brojponavljanja) );
end



rule "E2 - Biranje boje ako dresscode utice"
    no-loop
    salience 300
    when
        $unos : UnosDTO($dresscode : dressCode == DressCode.BLACKTIE );
        $gornjiDeo : GornjiDeo( boja == Boja.CRNA || boja == Boja.BELA);
        $list: List( size > 0 ) from collect(GornjiDeo( boja == Boja.CRNA || boja == Boja.BELA ))
    then
       	insert(new KoeficijentPreporuke(15 + 10 / $list.size(), $gornjiDeo));
       	System.out.println("E2 , id odece : " + $gornjiDeo.getId()  + "  broj bodova : " + (15 + 10 / $list.size()));
        insert(new Marker("E1"));
end

rule "E1 - Biranje boje odece ako dresscode ne utice"
    no-loop
    salience 290
    when
        $unos : UnosDTO( $bojeUnos : boje );
        $gornjiDeo : GornjiDeo( $b : boja memberOf $bojeUnos);
        $list: List( size > 0 ) from collect(GornjiDeo( boja memberOf $bojeUnos))
        not Marker(uniqueIdentifier == "E1")
    then
    	insert(new BojaIzabran( $b ));
    	insert(new KoeficijentPreporuke(5 + 5 / $list.size(), $gornjiDeo));
        System.out.println("E1 , id odece : " + $gornjiDeo.getId() + "  broj bodova : " + (5 + 5 / $list.size()) );
end

rule "ECB - Davanje bodova za crnu i belu"
    no-loop
    salience 290
    when
        $gornjiDeo : GornjiDeo( boja == Boja.CRNA || boja == Boja.BELA);
        $list: List( size > 0 ) from collect(GornjiDeo( boja == Boja.CRNA || boja == Boja.BELA))
    then
    	insert(new KoeficijentPreporuke(2 + 5 / $list.size(), $gornjiDeo));
        System.out.println("ECB");
end

rule "F - Dodavanje bodova za prilagodjenost vremenu"
    salience 250
        when
            $unos : UnosDTO($vremeUnos : vreme == Vreme.VLAZNO );
            $gornjiDeo : GornjiDeo( vreme == $vremeUnos);
            $list: List( size > 0 ) from collect(GornjiDeo( vreme == $vremeUnos ))
        then
           	insert(new KoeficijentPreporuke(10 + 5 / $list.size(), $gornjiDeo));
           	System.out.println("F , id odece : " + $gornjiDeo.getId()  + "  broj bodova : " + (10 + 5 / $list.size()));
end



rule "G - Biranje komada prema koeficijentu preporuke"
	salience ($poeni*10)
	lock-on-active
    when
    	$gornjiDeo : GornjiDeo();
    	 accumulate($koef : KoeficijentPreporuke($b4:Double.valueOf(bodovi * komad.getKoeficijentOdabira()) ), $ukupneVrednosti : sumPerItem($koef) );
    	Number($avg : doubleValue) from accumulate( $d : Double() from $ukupneVrednosti ,
                       	average($d) );
        $poeni : Double(this >= $avg) from accumulate(
                	KoeficijentPreporuke(komad.getId() == $gornjiDeo.getId(), $b1:Double.valueOf(bodovi * komad.getKoeficijentOdabira())),
                	sum($b1)
                );
        $preporuceniKomadi : PreporuceniKomadi();
    then
        modify($preporuceniKomadi) {getPreporuceniGornjiDelovi().add(new PreporuceniGornjiDeo($gornjiDeo, $poeni));}
        System.out.println($ukupneVrednosti);
    	System.out.println("G Biranje komada prema koeficijentu preporuke, izabran komad : " + $gornjiDeo.getId() + " broj poena : " + $poeni + "  srednja vrednost poena : " + $avg);
end

rule "Brisanje poena nakon odabira"
	salience -20
	no-loop
	when
		$koeficijentPreporuke:KoeficijentPreporuke();
		$preporuceniKomadi : PreporuceniKomadi();
	then
		delete($koeficijentPreporuke);
end


rule "Provera uspesnosti"
	salience -30
	no-loop
    when
        preporuceniKomadi : PreporuceniKomadi( preporuceniGornjiDelovi.size > 0);
    then
    	System.out.println("Uspesno zavrsena preporuka");
end











